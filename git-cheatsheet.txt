//Create Repository from Local
1. Create empty repository in bitbucket
2. Using terminal, Go into the directory containing the project.
3. $ git init .
4. $ git add . to add all of the relevant files.
5. You'll probably want to create a .gitignore file right away, to indicate all of the files you don't want to track. Use git add .gitignore , too.
6. $ git commit .
7. Link to Remote Repository

8. $ git remote add origin https://{{username}}:{{password}}@bitbucket.org/{{username}}/{{reponame}}.git

8. $ git remote set-url origin https://{{username}}:{{password}}@bitbucket.org/{{username}}/{{reponame}}.git

9. $ git push -u origin —all


git remote set-url origin https://{{username}}:{{password}}@bitbucket.org/{{username}}/{{reponame}}.git


--------------------------
//Set up a new git project 📂
$ git init

//Stages new and modified, without deleted 🔝
$ git add .

//Show the working tree status (obtains a summary of which files have changes that are staged for the next commit) 👀
$ git status

//Commit files to git 🔝
$ git commit -m "Type your short comment here"

//SET ORIGIN
$ git remote add origin https://{{username}}:{{password}}@bitbucket.org/{{username}}/{{reponame}}.git
example: $ git remote add origin https://{{username}}:{{password}}@bitbucket.org/{{username}}/{{reponame}}.git

//RESET ORIGIN
$ git remote set-url origin https://{{username}}:{{password}}@bitbucket.org/{{username}}/{{reponame}}.git
example: $ git remote set-url origin https://{{username}}:{{password}}@bitbucket.org/{{username}}/{{reponame}}.git

// First push, "-u" will prevent us from typing "origin master" all the time from this step ahead 🔝
$ git push -u origin master

//CLONE PROJ
// Clone a already created repository on GitHub. Important: First change the current working directory to the location where you want the cloned directory to be made.
// Run command
$ git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY
$ git clone https://github.com/isaklafleur/gittesting.git

// Remove a already created git repository 🚫 📂
$ rm -rf .git

// Show commit logs 👀
$ git log

// Create a new branch 🌱
// Specifying -b causes a new branch to be created
$ git checkout -b newbranchname

// Switch to a another branch 🌱 🔛
$ git checkout testingnewbranch

// switch back to the master branch 🌱 🌱🌱 🔛
$ git checkout master

// display all branches and see what branch you are working in 👀🌱
$ git branch

// display the history of commits using the alias 👀
$ git lg1
$ git lg2

// Pull all data from GitHub ⬇️
$ git pull

// Provokes push
$ git push -f origin master

// Push from the branch "crisdev"
git push origin crisdev

// Discart unstagged changes and go back to last commit in the selected branch
git checkout .

//Display if there are data on GitHub
git fetch

// Setting username and email in git
$ git config --global user.name "Isak La Fleur"
$ git config --global user.email "isak.engdahl@gmail.com"

// The -f option on git push forces the push. see more here: http://stackoverflow.com/questions/17291995/push-existing-project-into-github
$ git push -f origin master

// configure the .gitconfig file
// go to user home "cd ~" (on linux/mac) folder and type
$ nano .gitconfig

// Add file contents to the index
$ git add filename.txt

// stages All
$ git add -A

// stages new and modified, without deleted
$ git add .

// stages modified and deleted, without new
$ git add -u

// merge branch to master
$ git merge testingnewbranch

// display where you are
$ git remote

// Display remote versions
$ git remote -v

// Pull all data from Remote
$ git pull



GENERATE REPORTS with git
http://schacon.github.io/git/git-log.html
git log --date=short --pretty=format:'"%h","%an","%ad","%s",' --shortstat --no-merges | paste - - - > ../step_1_enhaced.csv
git log --date=short --pretty=format:'"%h","%an","%ad","%s",' --shortstat --no-merges | paste - - - > ../develop_git-log.csv
git log --date=short --notes --pretty=format:'"%h","%an","%ad","%s","%cn","%cr",' --shortstat --no-merges | paste - - - > ../dev_from_git_enhaced.csv
https://coderwall.com/p/bcthew/create-your-work-report-using-git-log
https://sharvy.net/2014/11/29/generate-beautiful-report-from-git-log-commit-history/
https://www.atlassian.com/git/tutorials/git-log/formatting-log-output